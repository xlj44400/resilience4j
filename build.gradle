plugins {
    id "org.sonarqube" version "2.8"
    id "com.jfrog.bintray" version "1.8.4"
    id "me.champeau.gradle.jmh" version "0.4.8"
    id 'org.asciidoctor.convert' version '1.6.0'
    id "com.jfrog.artifactory" version "4.9.5"
}
apply plugin: 'idea'
apply from: "${rootDir}/libraries.gradle"

ext {
    releaseVersion = '1.3.1'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'com.jfrog.artifactory'

    version = '1.4.0-SNAPSHOT'
    group = 'io.github.resilience4j'
    description = 'Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'

    repositories {
        jcenter()
        mavenCentral()
    }
}
artifactoryPublish.skip = true // apply to all projects except the root

ext {
    coreProjects = subprojects.findAll {
        p -> !p.name.endsWith("-bom")
    }
}

configure(project.coreProjects) {
    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply from: "${rootDir}/publishing.gradle"
    apply plugin: 'jacoco'

    dependencies {
        compile(libraries.vavr)
        compile(libraries.slf4j)

        // JSR-305 only used for non-required meta-annotations
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"

        testCompile(libraries.junit)
        testCompile(libraries.assertj)
        testCompile(libraries.logback)
        testCompile(libraries.mockito)
        testCompile(libraries.powermock)
        testCompile(libraries.powermock_api_mockito)
        testCompile(libraries.powermock_module_junit4)
        testCompile(libraries.awaitility)
        testCompile(libraries.jaxws)
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:unchecked", "-parameters"]
    }

    jmh {
        duplicateClassesStrategy = 'warn'
    }
}

def allTestCoverageFile = "${rootProject.projectDir}/build/reports/jacoco/report.xml"

sonarqube {
    properties {
        property "sonar.projectName", "resilience4j"
        property "sonar.projectKey", "resilience4j_resilience4j"
        property "sonar.links.homepage", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.ci", "https://travis-ci.org/resilience4j/resilience4j"
        property "sonar.links.scm", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.issue", "https://github.com/resilience4j/resilience4j/issues"
        property "sonar.language", "java"
        property "sonar.coverage.jacoco.xmlReportPaths", allTestCoverageFile
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoRootTestReport(type: JacocoReport) {

    subprojects.each { dependsOn("${it.name}:test") }
    subprojects.each { dependsOn("${it.name}:jacocoTestReport") }

    additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = subprojects.sourceSets.main.output
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

    onlyIf {
        true
    }

    reports {
        xml.enabled true
        xml.destination file(allTestCoverageFile)
        html.enabled true
        csv.enabled false
    }
}

subprojects {
    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    afterEvaluate {
        // exclude subprojects that don't produce a jar file or by design.
        if (!project.name.equals('resilience4j-bom')
                && !project.name.equals('resilience4j-test')) {
            jar {
                inputs.property('moduleName', moduleName)
                manifest.attributes(
                        'Automatic-Module-Name': moduleName
                )
            }
        }
    }
}

tasks.check.dependsOn tasks.jacocoRootTestReport
tasks.jacocoRootTestReport.dependsOn tasks.test

test {
    dependsOn(subprojects.test) // required by cobertura to aggregate report
}

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
            maven = true
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
}
